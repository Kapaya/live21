%%
%% This is file `sample-sigconf.tex',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% samples.dtx  (with options: `sigconf')
%%
%% IMPORTANT NOTICE:
%%
%% For the copyright see the source file.
%%
%% Any modified versions of this file must be renamed
%% with new filenames distinct from sample-sigconf.tex.
%%
%% For distribution of the original source see the terms
%% for copying and modification in the file samples.dtx.
%%
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%%
%% The first command in your LaTeX source must be the \documentclass command.
\documentclass[sigconf,10pt]{acmart}

\settopmatter{printfolios=true}
\settopmatter{printacmref=false}
\renewcommand\footnotetextcopyrightpermission[1]{}
\pagestyle{plain}

\usepackage{hyperref}

$if(highlighting-macros)$
$highlighting-macros$
$endif$

\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}

%%
%% \BibTeX command to typeset BibTeX logo in the docs
\AtBeginDocument{%
  \providecommand\BibTeX{{%
    \normalfont B\kern-0.5em{\scshape i\kern-0.25em b}\kern-0.8em\TeX}}}

%% Rights management information.  This information is sent to you
%% when you complete the rights form.  These commands have SAMPLE
%% values in them; it is your responsibility as an author to replace
%% the commands and values with those provided to you when you
%% complete the rights form.


%%
%% Submission ID.
%% Use this when submitting an article to a sponsored event. You'll
%% receive a unique submission ID from the organizers
%% of the event, and this ID should be used as the parameter to this command.
%%\acmSubmissionID{123-A56-BU3}

%%
%% The majority of ACM publications use numbered citations and
%% references.  The command \citestyle{authoryear} switches to the
%% "author year" style.
%%
%% If you are preparing content for an event
%% sponsored by ACM SIGGRAPH, you must use the "author year" style of
%% citations and references.
%% Uncommenting
%% the next command will enable that style.
%%\citestyle{acmauthoryear}
\pagenumbering{gobble}
%%
%% end of the preamble, start of the body of the document source.
\begin{document}

%%
%% The "title" command has an optional parameter,
%% allowing the author to define a "short title" to be used in page headers.
\title{$title$}

%%
%% The "author" command and its associated commands are used to define
%% the authors and their affiliations.
%% Of note is the shared affiliation of the first two authors, and the
%% "authornote" and "authornotemark" commands
%% used to denote shared contribution to the research.

%\author{Kapaya Katongo}
%\affiliation{%
%  \institution{MIT CSAIL}
%  \city{Cambridge, MA}
%  \country{USA}
%}
%\email{kkatongo@mit.edu}

%\author{Geoffrey Litt}
%\affiliation{%
%  \institution{MIT CSAIL}
%  \city{Cambridge, MA}
%  \country{USA}
%}
%\email{glitt@mit.edu}

%\author{Kathryn Jin}
%\affiliation{%
%  \institution{MIT CSAIL}
%  \city{Cambridge, MA}
%  \country{USA}
%}
%\email{kjin@mit.edu}

%\author{Daniel Jackson}
%\affiliation{%
% \institution{MIT CSAIL}
%  \city{Cambridge, MA}
%  \country{USA}
%}
%\email{dnj@csail.mit.edu}

%%
%% By default, the full list of authors will be used in the page
%% headers. Often, this list is too long, and will overlap
%% other information printed in the page headers. This command allows
%% the author to define a more concise list
%% of authors' names for this purpose.
% \renewcommand{\shortauthors}{Trovato and Tobin, et al.}

%%
%% The abstract is a short summary of the work to be presented in the
%% article.
 \begin{abstract}
  $abstract$
 \end{abstract}

%%
%% The code below is generated by the tool at http://dl.acm.org/ccs.cfm.
%% Please copy and paste the code instead of the example below.
%%
%% From HERE
%%\begin{CCSXML}
%%<ccs2012>
%%<concept>
%%<concept_id>10011007.10011006.10011066.10011069</concept_id>
%%<concept_desc>Software and its engineering~Integrated and visual development environments</concept_desc>
%%<concept_significance>500</concept_significance>
%%</concept>
%%</ccs2012>
%%\end{CCSXML}

%% \ccsdesc[500]{Software and its engineering~Integrated and visual development environments}
% To HERE

%%
%% Keywords. The author(s) should pick words that accurately describe
%% the work being presented. Separate the keywords with commas.
%% \keywords{end-user programming, software customization, web scraping, programming-by-example, program synthesis}

%% A "teaser" image appears between the author and affiliation
%% information and the body of the document, and typically spans the
%% page.
% \begin{teaserfigure}
%  \includegraphics[width=\textwidth]{sampleteaser}
%  \caption{Seattle Mariners at Spring Training, 2010.}
%  \Description{Enjoying the baseball game from the third-base
%  seats. Ichiro Suzuki preparing to bat.}
%  \label{fig:teaser}
%\end{teaserfigure}

%%
%% This command processes the author and affiliation and title
%% information and builds the first part of the formatted document.
\maketitle

$body$

% \printbibliography

%%
%% The next two lines define the bibliography style to be used, and
%% the bibliography file.
\bibliographystyle{ACM-Reference-Format}
\bibliography{references-bibtex.bib}

\clearpage
\hypertarget{appendix}{%
\section*{Appendix}\label{appendix}}

\hypertarget{appendix-a}{%
\subsection*{A: Extraction Formulas}\label{appendix-a}}

Joker adds DOM elements as a data type to Wildcard's formula language, alongside strings,
numbers, and booleans. Because the language runs in a JavaScript
interpreter, we simply use native JavaScript values to represent DOM
elements in the language. DOM elements are displayed visually by showing
their inner text contents. They can also be implicitly typecast to
strings for use in other formulas; for example, a string manipulation
formula like \texttt{Substring} can be called on a DOM element value,
and will operate on its text contents.

We also added several functions to the formula language for traversing
the DOM and performing extractions, summarized below with their types:

\begin{itemize}
\tightlist
\item
  \texttt{QuerySelector(el:\ Element,\ sel:\ string):\ Element}.
  Executes the CSS selector \texttt{sel} inside of element \texttt{el},
  and returns the first matching element.
\item
  \texttt{GetAttribute(el:\ Element,\ attribute:\ string):\ string}.
  Returns the value for an attribute on an element.
\item
  \texttt{GetParent(el:\ Element):\ Element}. Returns the parent of a
  given element.
\end{itemize}

To extract data from a row, formulas need a way to reference the current
row, so we added a construct to support this use case. Every row in the
table maps to one DOM element in the page; we allow formulas to access
this DOM element via a special keyword, \texttt{rowElement}. In some
sense, \texttt{rowElement} can be seen as a hidden extra column of data
in the table containing DOM elements.

While many more functions could be added to expose more of the
underlying DOM API, we found that in practice these three functions
provided ample power through composition. For example, in
Section~\ref{sec:examples} we showed how \texttt{GetParent} and
\texttt{GetAttribute} can be composed to traverse the DOM and extract
the URL associated with a product listing.

\hypertarget{appendix-b}{%
\subsection*{B: Wrapper Induction Algorithm}\label{appendix-b}}

Our wrapper induction algorithm implements a set of heuristics inspired by Vegemite
as described below:

\hypertarget{determining-row-elements}{%
\subsubsection*{Determining Row
Elements}\label{determining-row-elements}}

The user starts by demonstrating an element \(v\), representing a value
that should be in the table. From that demonstration, we must find a set
of \emph{row elements} that represent the rows of the table. We could
naively assume that \(parent(v)\) is the row containing \(v\), but often
\(v\) is deeply nested inside its containing row; we must determine
which ancestor of \(v\) is likely to be the row.

Intuitively, we solve this problem by assuming that all rows share some
similar internal structure. In particular, we expect most rows to
contain a value for the demonstrated column. (If there were no missing
data, we'd expect \emph{all} rows to contain data for this column.)

Formally: assume a function \(select(el, s)\) which runs a CSS selector
that returns the set of elements matching \(s\) within \(el\). We
generate a set of plausible candidates \(P\), consisting of pairs of a
row element and a CSS selector:

\(P = \{ (r, s) \mid r \in ancestors(v) \land select(r, s) = \{v\} \}\)

For each candidate \((r, s) \in P\), we compute a weight function \(w\),
which is based on the number of siblings of \(r\) that have ``similar
structure'', defined by checking whether running \(s\) within the
sibling also returns a unique element.

\(w(r, s) = |\{ r' \mid r' \in siblings(r) \land |select(r', s) | = 1 \}|\)

We then choose the candidate with the highest weight. In case of ties,
the candidate closer to \(v\) in the tree (i.e., lower in the tree)
wins. Given a winning candidate \((r, s)\), the full set of row elements
is \(\{r\} \cup siblings(r)\).

\hypertarget{synthesizing-css-selectors-for-column-values}{%
\subsubsection*{Synthesizing CSS Selectors For Column
Values}\label{synthesizing-css-selectors-for-column-values}}

Once we have determined the row elements, next we must choose a CSS
selector that will be used to identify the demonstrated value within its
row.

Given a demonstrated value \(v\) within a row element \(r\), we generate
two kinds of plausible selectors:

\begin{itemize}
\tightlist
\item
  selectors using CSS classes, which are manual annotations on DOM
  elements added by the website's programmers, typically for styling
  purposes (e.g.~"item\_\_price")
\item
  selectors using positional indexes within the tree, using the
  \texttt{nth-child} CSS selector (e.g.~\texttt{nth-child(2)},
  representing the second child of an element)
\end{itemize}

The minimum criteria for a plausible selector \(s\) is that it uniquely
identifies the value within the row: \(select(r, s) = \{v\}\). But there
may be many plausible selectors, so we must pick a best one.

We first prioritize selectors using classes, because they tend to be
more robust to changes on the website. A single selector can combine
multiple classes, but we prefer using fewer classes when possible. If no
plausible class-based selector can be generated (for example, if the
relevant elements don't have any classes to query), we fall back to
using a positional index selector. This kind of selector can always be
generated regardless of the contents of the page, but tends to be less
accurate and robust.

\end{document}
\endinput
%%
%% End of file `sample-sigconf.tex'.
